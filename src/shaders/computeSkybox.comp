#include "utils.h"

layout(local_size_x_id = 0, local_size_y_id = 0) in;

layout(set = 0, binding = 0) uniform texture2D envTexture;
layout(set = 0, binding = 1, rgba16f) uniform restrict writeonly imageCube skyboxImage;
layout(set = 0, binding = 5) uniform sampler linearClampSampler;

vec4 sampleEquirectTexture(vec3 pos)
{
    pos = normalize(pos);
    float theta = acos(pos.y); // [0, PI] from Y (up)
    float phi = atan(pos.z, pos.x); // [-PI, PI] from X (right)
    vec2 uv = vec2(phi * ONE_OVER_TWO_PI + 0.5f, theta * ONE_OVER_PI);
    return texture(sampler2D(envTexture, linearClampSampler), uv);
}

void main()
{
    uint faceSize = imageSize(skyboxImage).x;
    uvec2 texelCoords = gl_GlobalInvocationID.xy;
    if(texelCoords.x >= faceSize || texelCoords.y >= faceSize)
        return;

    vec2 pos = (2.f * texelCoords + 1.f) / faceSize - 1.f;
    imageStore(skyboxImage, ivec3(texelCoords, 0), sampleEquirectTexture(vec3(1.f, -pos.y, -pos.x)));
    imageStore(skyboxImage, ivec3(texelCoords, 1), sampleEquirectTexture(vec3(-1.f, -pos.y, pos.x)));
    imageStore(skyboxImage, ivec3(texelCoords, 2), sampleEquirectTexture(vec3(pos.x, 1.f, pos.y)));
    imageStore(skyboxImage, ivec3(texelCoords, 3), sampleEquirectTexture(vec3(pos.x, -1.f, -pos.y)));
    imageStore(skyboxImage, ivec3(texelCoords, 4), sampleEquirectTexture(vec3(pos.x, -pos.y, 1.f)));
    imageStore(skyboxImage, ivec3(texelCoords, 5), sampleEquirectTexture(vec3(-pos.x, -pos.y, -1.f)));
}